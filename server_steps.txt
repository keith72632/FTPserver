Steps for Server:
	#includes:
		-stdio.h
		-string.h
		-sys/socket.h
		-arpa/inet.h
		-unistd.h
1) Create Socket
	-assigned to variable (hSocket = socket()) and may use in helper fuction
	-socket argument AF_INET for standard interent, SOCK_STREAM, and protocal as third(0)
2) Bind
	-create int (iRetval) as -1. this gets returned if socket could not be created
	-bind will take first; vaiable that socket fuction is assigned to, second; remote from struct sockaddr
		-struct sockaddr_in remote ={0}
		-remote.sin_addr.s_addr = htnol(INADDR_ANY)
		-remote.sin_port = htons(clientPort)
	-and third argument is the size of remote structure
	-use bind assigned to variable(iRetval)
main function:
	-best to define variables for
		-int sock_desc, sock, clientLen all to 0
		-struct sockaddr_in client
		-will need character array for message and client message
		-also define a pointer array to a welocme message
3)check if socket is created and bound by check if they are greater than zero
4)Listen using listen(socket, 1-3)
5)start infinite loop. usually a while loop, or for( ; ; )
5b) store the sizo of struct sockaddr_in int clientLen vaiable
6)accept(socket, client structure, (socklen_t)&clientLen
	-use the &client structure
7)if what is returned from accept is less than zero, then send error
8) need to set memory (memset) for message and client_message memset(client_message, '\0', sizeof client_message)
9)if the recv(sock, client_message, 200, 0) < 0 then send error
	-else, print client message
10)if the client message and pointer message are the same (strcmp) then printf hi or soemthing, else error
11)still in while loop, close sock and sleep for 1

